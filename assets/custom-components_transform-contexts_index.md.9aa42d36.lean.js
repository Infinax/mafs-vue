import{_ as g}from"./chunks/TransformPizza.vue_vue_type_script_setup_true_lang.f5aa2daa.js";import{a as x,Q as _,c as i,N as v,K as w,E as T}from"./chunks/index.3c45ee81.js";import{d,j as S,k as b,a as r,e as y,F as q,r as E,c as k,w as f,b as c,u as m,f as u}from"./chunks/framework.ab10dd6e.js";const P=["cx","cy","fill"],a=5,D=10,z=d({__name:"PointCloud",setup(h){const l=x(),p=_(),F=S([]);for(let o=0;o<=a;o+=a/D)for(let s=0;s<=a;s+=a/D){const n=i.transform([o,s],p.value),t=i.transform(n,l.value),e=360*(o+s)/(a*2),C=100,A=e>200&&e<300?70:50;F.push({at:t,color:`hsl(${e} ${C}% ${A}%)`})}return b([l,p],()=>{let o=0;for(let s=0;s<=a;s+=a/D)for(let n=0;n<=a;n+=a/D){const t=i.transform([s,n],p.value),e=i.transform(t,l.value);F[o++].at=e}},{immediate:!0}),(o,s)=>(r(),y("g",null,[(r(!0),y(q,null,E(F,({at:[n,t],color:e})=>(r(),y("circle",{key:`${n},${t}`,cx:n,cy:t,r:3,fill:e,class:"mafs-shadow"},null,8,P))),128))]))}}),j=d({__name:"TransformPointCloud",setup(h){return(l,p)=>(r(),k(m(T),{height:300,viewBox:{y:[-1,5],x:[-1,6]}},{default:f(()=>[c(m(v)),c(m(w),null,{default:f(()=>[c(z)]),_:1})]),_:1}))}}),V=u('<h1 id="transform-contexts" tabindex="-1">Transform contexts <a class="header-anchor" href="#transform-contexts" aria-label="Permalink to &quot;Transform contexts&quot;">​</a></h1><p>At its core, Mafs is just SVG with two contextual transforms. Those transforms correspond to two things:</p><ul><li>The <strong>view transform</strong>, which maps from world space to pixel space.</li><li>The <strong>user transform</strong>, which is imposed by the <a href="./../../display/transform/">Transform</a> component.</li></ul><p>The general approach is that, to render a point <code>(x, y)</code>, you must first apply the user transform (because, well, the user is trying to move your component in some way), and <em>then</em> the view transform (so that it gets rendered by the SVG renderer in the right spot).</p><p>Mafs provides these transforms through two means:</p><ul><li>The <code>--mafs-view-transform</code> and <code>--mafs-user-transform</code> CSS custom properties, which can be applied to an SVG element&#39;s <code>style</code> attribute.</li><li>The <code>useInjectUserTransform</code> hook return the <code>userTransform</code> matrix.</li><li>The <code>useInjectViewTransform</code> hook return the <code>viewTransform</code> matrix.</li></ul><p>Components can mix and match these two approaches depending on needs. For example, the <a href="./../../display/text/">Text</a> component transforms its <em>anchor point</em> in JavaScript, and doesn&#39;t apply any CSS transforms, because that would distort the text itself. On the other hand, the <a href="./../../display/ellipses/">Ellipse</a> component almost entirely relies on CSS transforms internally.</p><h2 id="accessing-transforms-in-css" tabindex="-1">Accessing transforms in CSS <a class="header-anchor" href="#accessing-transforms-in-css" aria-label="Permalink to &quot;Accessing transforms in CSS&quot;">​</a></h2><p>Here&#39;s an example of a custom component that uses the CSS transforms approach to render a delicious little <code>PizzaSlice</code>. The slice is wrapped in <code>TransformWidget</code> component so that you can try applying some user transforms it.</p>',9),$=u(`<details class="details custom-block"><summary>Code Slice</summary><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> PizzaSlice </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./PizzaSlice.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Mafs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Cartesian</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">TransformWidget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mafs-vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Mafs</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">300</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:viewBox</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ y: [-1, 1], x: [-3, 3] }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Cartesian</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TransformWidget</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">PizzaSlice</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">TransformWidget</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Mafs</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></details><p>This is an example of a component that gets entirely transformed by the user and view transforms. The pizza slice can end up totally distorted. For cases where you want to preserve the aspect ratio or pixel size of your component, you likely need to use the hooks approach.</p><h2 id="accessing-transforms-in-javascript" tabindex="-1">Accessing transforms in JavaScript <a class="header-anchor" href="#accessing-transforms-in-javascript" aria-label="Permalink to &quot;Accessing transforms in JavaScript&quot;">​</a></h2><p>Here&#39;s an example of a custom component that uses the hooks approach to render a grid of points. Because we want the grid&#39;s points to have a radius of 3 <em>pixels</em> (regardless of the viewport or any transforms), we use the <code>useInjectUserTransform</code> and <code>useInjectViewTransform</code> hook to get the user and view transforms and apply them to the circles&#39; <code>x</code> and <code>y</code> coordinates, but not to their radius (which is in pixels). We also cannot use the CSS transforms approach here, because that would distort each circle.</p>`,4),M=u(`<details class="details custom-block"><summary>Code</summary><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> PointCloud </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./PointCloud.vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Mafs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Cartesian</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">TransformWidget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mafs-vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Mafs</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">300</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:viewBox</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ y: [-1, 5], x: [-1, 6] }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Cartesian</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TransformWidget</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">PointCloud</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">TransformWidget</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Mafs</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></details>`,1),J=JSON.parse('{"title":"Transform contexts","description":"","frontmatter":{},"headers":[],"relativePath":"custom-components/transform-contexts/index.md","filePath":"custom-components/transform-contexts/index.md"}'),W={name:"custom-components/transform-contexts/index.md"},U=d({...W,setup(h){return(l,p)=>(r(),y("div",null,[V,c(g),$,c(j),M]))}});export{J as __pageData,U as default};
